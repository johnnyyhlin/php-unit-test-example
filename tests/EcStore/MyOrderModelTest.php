<?php
/**
 * Created by PhpStorm.
 * User: Miko
 * Date: 10/16/2018
 * Time: 10:03 PM
 */

namespace Tests\EcStore;

use PHPUnit\Framework\TestCase;
use Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;
use Mockery as m;
use App\EcStore\MyOrderModel;
use App\EcStore\IRepository;
use App\EcStore\MyOrder;
use stdClass;

class MyOrderModelTest extends TestCase
{
    use MockeryPHPUnitIntegration;

    private $repository;

    private $myOrderModel;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = m::mock(IRepository::class);
        $this->myOrderModel = new MyOrderModel($this->repository);
    }

    /** @test */
    public function insert_order()
    {
        $this->givenNotExistOrder();
        $insertCallback = $this->createCallback(1);
        $updateCallback = $this->createCallback(0);
        $this->repoShouldInsertOrder();
        $this->myOrderModel->save(new MyOrder(), $insertCallback, $updateCallback);
    }
    /** @test */
    public function update_order()
    {
        // TODO
    }

    private function givenNotExistOrder(): void
    {
        $this->repository->shouldReceive('isExist')->andReturn(false);
    }

    private function repoShouldInsertOrder(): void
    {
        $this->repository->shouldReceive('insert')->once();
    }

    /**
     * @param $insertFlag
     */
    private function shouldInvokeInsertClosure($insertFlag): void
    {
        $this->assertTrue($insertFlag);
    }

    /**
     * @param $updateFlag
     */
    private function shouldNotInvokeUpdateClosure($updateFlag): void
    {
        $this->assertFalse($updateFlag);
    }


    /**
     * @param $expectedInvokedTimes
     * @return array
     */
    private function createCallback($expectedInvokedTimes)
    {
        $mockCallable = m::mock(stdClass::class);
        $mockCallable->shouldReceive('call')->times($expectedInvokedTimes);
        $mockCallback = [$mockCallable, 'call'];
        return $mockCallback;
    }
}