<?php
/**
 * Created by PhpStorm.
 * User: Miko
 * Date: 10/16/2018
 * Time: 10:03 PM
 */

namespace Tests\EcStore;

use PHPUnit\Framework\TestCase;
use Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;
use Mockery as m;
use App\EcStore\MyOrderModel;
use App\EcStore\IRepository;
use App\EcStore\MyOrder;

class MyOrderModelTest extends TestCase
{
    use MockeryPHPUnitIntegration;

    private $repository;

    private $myOrderModel;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = m::mock(IRepository::class);
        $this->myOrderModel = new MyOrderModel($this->repository);
    }

    /** @test */
    public function insert_order()
    {
        $this->givenNotExistOrder();
        $this->repoShouldInsertOrder();

        $insertFlag = false;
        $insertFunc = function ($order) use (&$insertFlag) {
            $insertFlag = true;
        };
        $updateFlag = false;
        $updateFunc = function ($order) use (&$updateFlag) {
            $updateFlag = true;
        };

        $this->myOrderModel->save(new MyOrder(), $insertFunc, $updateFunc);

        $this->shouldInvokeInsertClosure($insertFlag);
        $this->shouldNotInvokeUpdateClosure($updateFlag);
    }
    /** @test */
    public function update_order()
    {
        // TODO
    }

    private function givenNotExistOrder(): void
    {
        $this->repository->shouldReceive('isExist')->andReturn(false);
    }

    private function repoShouldInsertOrder(): void
    {
        $this->repository->shouldReceive('insert')->once();
    }

    /**
     * @param $insertFlag
     */
    private function shouldInvokeInsertClosure($insertFlag): void
    {
        $this->assertTrue($insertFlag);
    }

    /**
     * @param $updateFlag
     */
    private function shouldNotInvokeUpdateClosure($updateFlag): void
    {
        $this->assertFalse($updateFlag);
    }
}